version: '3.8'

services:

  db:
    build: 
      context: ./db
      dockerfile: Dockerfile.db 
    environment: 
      DB_HOST: host.docker.internal
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    ports: 
     - "8000:8000"
    command: python ./db-setup.py 
    
  # Rest API (Express) service
  rest-api:
    build:
        context: ./lambdas/rest-api 
        dockerfile: Dockerfile.rest-api
    environment: 
      DB_HOST: host.docker.internal
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    image: express/api
    container_name: express_api
    ports:
      - "3000:3000"
    depends_on:
      - db

 
  localstack:
    image: localstack/localstack:latest
    ports:
      - "4566:4566"  
      - "4510-4520:4510-4520" 
    environment:
      - DEBUG=true 
      - SERVICES=lambda,s3,iam,apigateway
      - HOSTNAME=localstack
      - HOSTNAME_EXTERNAL=localstack
      - AWS_DEFAULT_REGION=us-east-1 
      - DB_HOST=host.docker.internal
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock" 
      - "./setup-localstack.sh:/etc/localstack/init/ready.d/setup-localstack.sh" ## build aws service
      - './role-policy.json:/app/policies/role-policy.json'
      - "./lambdas/processing/insert_clean/find_gutenburg_books:/app/guten_lambda"  ## guten lambda
      - "./lambdas/processing/insert_clean/insert_text:/app/embed_lambda" ## embeddings 
      - "./lambdas/clustering/cluster:/app/cluster_lambda" ## clustering
      - "./lambdas/clustering/predict:/app/predict_lambda" ## prediction
    depends_on:
      - db

  
